// -----------------------------------------------------------------------------
// This file contains CSS helper classes, Sass functions and mixins.
// -----------------------------------------------------------------------------

/* ----------
   Classes
------------- */

/**
 * Clear inner floats
 */
.clearfix {
   *zoom: 1;
   &::after {
      content: '';
      display: table;
      line-height: 0;
      clear: both;
   }
}

/**
 * Main content containers
 * 1. Make the container full-width with a maximum width
 * 2. Center it in the viewport
 * 3. Leave some space on the edges, especially valuable on small screens
 */
.container {
   max-width: var(--max-width); /* 1 */
   margin-left: auto; /* 2 */
   margin-right: auto; /* 2 */
   padding-left: var(--space-m); /* 3 */
   padding-right: var(--space-m); /* 3 */
   width: 100%; /* 1 */
}

/**
 * Hide text while making it readable for screen readers
 * 1. Needed in WebKit-based browsers because of an implementation bug;
 *    See: https://code.google.com/p/chromium/issues/detail?id=457146
 */
.hide-text {
   overflow: hidden;
   padding: 0; /* 1 */
   text-indent: 101%;
   white-space: nowrap;
}

/**
 * Hide element while making it readable for screen readers
 * Shamelessly borrowed from HTML5Boilerplate:
 * https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css#L119-L133
 */
.visually-hidden {
   border: 0;
   clip: rect(0 0 0 0);
   height: 1px;
   margin: -1px;
   overflow: hidden;
   padding: 0;
   position: absolute;
   width: 1px;
}

/* ------------
   Functions
--------------- */

/// Native `url(..)` function wrapper
/// @param {String} $base - base URL for the asset
/// @param {String} $type - asset type folder (e.g. `fonts/`)
/// @param {String} $path - asset path
/// @return {Url} -
@function asset($base, $type, $path) {
   @return url($base+$type+$path);
}

/// Returns URL to an image based on its path
/// @param {String} $path - image path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function image($path, $base: $base-url) {
   @return asset($base, 'images/', $path);
}

/// Returns URL to a font based on its path
/// @param {String} $path - font path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function font($path, $base: $base-url) {
   @return asset($base, 'fonts/', $path);
}

/// Slightly lighten a color
/// @access public
/// @param {Color} $color - color to tint
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color} -
@function tint($color, $percentage) {
   @return mix(white, $color, $percentage);
}

/// Slightly darken a color
/// @access public
/// @param {Color} $color - color to shade
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color} -
@function shade($color, $percentage) {
   @return mix(black, $color, $percentage);
}

/* ---------
   Mixins
------------ */

/// Sizing
/// @param {Number} $width
/// @param {Number} $height [$width]
@mixin size($width, $height: $width) {
   width: $width;
   height: $height;
}

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
   @if $self {
      &,
      &:hover,
      &:active,
      &:focus {
         @content;
      }
   } @else {
      &:hover,
      &:active,
      &:focus {
         @content;
      }
   }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
   #{$context} & {
      @content;
   }
}

/// Ensure text doesn't overflow its container and breaks nicely
/// @author HackingUI
/// @link https://hackingui.com/10-best-scss-utilities/
/// @param {String} $overflow [ellipsis]
@mixin truncate-text($overflow: ellipsis) {
   overflow: hidden;
   white-space: nowrap;
   text-overflow: $overflow; // values are: clip, ellipsis, or a string
}

/**
 * Alignments
 */

@mixin center-block {
   display: block;
   float: none;
   margin-left: auto;
   margin-right: auto;
}

@mixin align-left {
   float: left;
   margin-right: 1.5em;
   margin-bottom: 1.5em;
}

@mixin align-right {
   float: right;
   margin-left: 1.5em;
   margin-bottom: 1.5em;
}

@mixin align-center {
   clear: both;
   @include center-block();
   margin-bottom: 1.5em;
}

/// Vertically center elements with a dynamic size
/// @author HackingUI
/// @link https://hackingui.com/10-best-scss-utilities/
/// @param {String} $overflow [ellipsis]
@mixin vertical-align {
   &:before {
      content: '';
      display: inline-block;
      vertical-align: middle;
      height: 100%;
      width: 0.1px;
   }
}

/// display li elements inline
@mixin list-inline() {
   list-style: none;
   margin: 0;
   padding: 0;
   li {
      display: inline-block;
   }
}
